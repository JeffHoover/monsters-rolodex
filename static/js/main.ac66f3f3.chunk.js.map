{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","undefined","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,6BAEP,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCPbC,EAAW,SAAAR,GACpB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCHlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SACba,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCHG,E,kDAhCX,aAAe,IAAD,8BACV,mBAAMC,IAQVJ,aAAe,SAACK,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAPrC,EAAKC,MAAQ,CACTd,SAAU,GACVW,YAAa,IALP,E,qDAJd,WAAqB,IAAD,OAChBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAgBjI,WAAU,IAAD,EAC4BC,KAAKN,MAA9Bd,EADH,EACGA,SAAUW,EADb,EACaA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGpD,OACI,sBAAK/B,UAAU,MAAf,UACI,+CACA,cAAC,EAAD,CACIW,YAAY,iBACZC,aAAcgB,KAAKhB,eAEvB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAhClBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ac66f3f3.chunk.js","sourcesContent":["import React from \"react\";\nimport '../card/card.styles.css';\n\nexport const Card = props => (\n    <div className=\"card-container\">\n        <img\n            alt='monster'\n            src={`https://robohash.org/${props.monster.id}}?set=set4&size=180x180`}\n        />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = props => {\n    return <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster = {monster}/>\n        ))}\n    </div>\n}","import React from \"react\";\nimport '../search-box/search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import './App.css';\nimport {Component} from \"react\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\"\n\nclass App extends Component {\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({monsters: users}))\n    }\n\n    constructor() {\n        super(undefined);\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n    }\n\n    handleChange=  (e) => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n        const { monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\n        );\n\n        return (\n            <div className=\"App\">\n                <h1>Monster Cards</h1>\n                <SearchBox\n                    placeholder='search........'\n                    handleChange={this.handleChange}\n                />\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}